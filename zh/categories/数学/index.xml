<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数学 | 杜利强</title>
    <link>https://keris.github.io/zh/categories/%E6%95%B0%E5%AD%A6/</link>
      <atom:link href="https://keris.github.io/zh/categories/%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <description>数学</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Sat, 04 Apr 2020 13:02:41 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>数学</title>
      <link>https://keris.github.io/zh/categories/%E6%95%B0%E5%AD%A6/</link>
    </image>
    
    <item>
      <title>一个概率问题</title>
      <link>https://keris.github.io/zh/post/a-probability-problem/</link>
      <pubDate>Sat, 04 Apr 2020 13:02:41 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/a-probability-problem/</guid>
      <description>&lt;p&gt;在开始之前我想说下这个配图，它是我今天早上拍的，里面是自己做的早餐，盘中是一个香蕉切了四小段，一片吐司面包和些许腰果，而旁边的碗中是牛奶泡燕麦。这样的搭配我已经吃了一周了，我已经感受到了积极的变化，而原先我都是不吃早餐或者在下地铁后顺路买一份麦当劳。&lt;/p&gt;
&lt;p&gt;现在我回到正题上。这个概率问题如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一个盒子，里面放了10个球，每个上面标了1到10之间的某个数字，现在进行3次有放回的抽取，问第一次的号小于第二次，第二次又小于第三次的概率是多少？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题其实不难，我自认为智商中等偏下，这个题当我在面试时没有解出来😞。下面我回顾一下当初的情景。&lt;/p&gt;
&lt;p&gt;首先，我知道样本空间$\Omega$的大小为$|\Omega| = 10^3 = 1000$，如果我们将所求事件记为$A$，并且第$i$次抽取得到的号为$N_i(i=1,2,3)$，则$A = \{\omega = (N_1, N_2, N_3) \in \Omega: N_1 \lt N_2 \lt N_3\}$。现在要计算的是$|A|$，即事件$A$包含了多少个点？&lt;/p&gt;
&lt;p&gt;我采取逐个数的策略，但不是那么容易。$N_1$可以取1到8之间的数字，然后再考虑$N_2$的取值，最后是$N_3$。&lt;/p&gt;
&lt;p&gt;$N_1 = 1$的情况:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    1
   /  \
  2 ... 9
 /  \    \
3 ... 10  10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上示意图中，每一层表示$N_i(i=1,2,3)$的取值，最后要计算的是叶子节点的数目。
容易计算当$N_1 = 1$时，共有$8 + 7 + \cdots + 1 = \frac{8 \cdot (8 + 1)}{2} = 36$个叶子结点。&lt;/p&gt;
&lt;p&gt;类似地，&lt;/p&gt;
&lt;p&gt;$N_1=2$时，有$7 + \cdots + 1 = \frac{7 \cdot (7 + 1)}{2} = 28$，&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;$N_1=8$时，有$1$。&lt;/p&gt;
&lt;p&gt;最后的答案是$|A| = 36 + 28 + 21 + 15 + 10 + 6 + 3 + 1 = 120$，所以所求概率为$P = \frac{|A|}{|\Omega|} = \frac{120}{1000} = .12$。&lt;/p&gt;
&lt;p&gt;以上答案我在当时的情景下限于时间以及有些许紧张也没有给出😞。&lt;/p&gt;
&lt;p&gt;当时我还有个想法就是使用程序的方法进行计数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;count = 0
for i in range(1, 9): # N1
  for j in range(i+1, 11): # N2
    for k in range(j+1, 11): # N3
      count += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上结果也会给出正确的结果即120。这个想法在当时考虑到切屏会有不好的影响，没有实行。&lt;/p&gt;
&lt;p&gt;后来一细想，以上两种方法都不是最优的，再三思考之后得到了最佳方法。看来自己脑子不好使了，对概率求解生疏也是原因。&lt;/p&gt;
&lt;p&gt;下面说说怎么最优求解。&lt;/p&gt;
&lt;p&gt;事件$A$中三个数都不同，从10个数连续3次取不同共有$10 \cdot 9 \cdot 8 = 720$，但是我们需要$N_1 \lt N_2 \lt N_3$，而三个数的排列共有$3! = 6$种，其中只有一种满足要求，所以$|A| = \frac{720}{6} = 120$。&lt;/p&gt;
&lt;p&gt;至此，问题求解完毕。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>先手优势</title>
      <link>https://keris.github.io/zh/post/xianshou-throwing/</link>
      <pubDate>Tue, 24 Mar 2020 14:00:50 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/xianshou-throwing/</guid>
      <description>&lt;p&gt;棋经有云，“宁失一子，勿失一先”，可见先手的好处所在。为了建立对先手直观的理解，我们来玩一个游戏：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;两个人玩投掷硬币的游戏，先掷出正面的人获胜，那么你是选择先掷还是后掷？&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;数学解法&#34;&gt;数学解法&lt;/h2&gt;
&lt;p&gt;假设硬币是公平的，即出现正面和反面的概率一样，均为&lt;code&gt;1/2&lt;/code&gt;。那么，在先手下获胜的情况是第&lt;code&gt;n&lt;/code&gt;次掷得正面，前&lt;code&gt;n-1&lt;/code&gt;次都为反面，其中&lt;code&gt;n&lt;/code&gt;为奇数。所以先手获胜的概率为&lt;/p&gt;
&lt;p&gt;$$p(\text{win}|\text{first}) = \sum_{k=0}^{\infty}(\frac{1}{2})^{2k + 1} = \frac{2}{3}$$&lt;/p&gt;
&lt;p&gt;相反，在后手下获胜的情况是第&lt;code&gt;n&lt;/code&gt;次掷得正面，前&lt;code&gt;n-1&lt;/code&gt;次均为反面，其中&lt;code&gt;n&lt;/code&gt;为偶数。所以，后手获胜的概率为&lt;/p&gt;
&lt;p&gt;$$p(\text{win}|\text{second}) = \sum_{k=1}^{\infty}(\frac{1}{2})^{2k} = \frac{1}{3}$$&lt;/p&gt;
&lt;p&gt;可以发现，先手获胜的概率为2/3，而后手获胜的概率为1/3，这告诉我们在生活中抓住先机，主动出击往往更能取得胜利。&lt;/p&gt;
&lt;h2 id=&#34;模拟法&#34;&gt;模拟法&lt;/h2&gt;
&lt;p&gt;前面我们用数学的方法进行了求解，下面来看看如何用程序来模拟，为此我写了一个Python程序：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# coding: utf-8
# filename: code.py
# Author: Liqiang Du &amp;lt;keris.du@gmail.com&amp;gt;
import random
import numpy as np


def simulate(n_games):
    &amp;quot;&amp;quot;&amp;quot;
    Simulate coin throwing game, the game is over when head appears.

    Args:
        n_games (int): the number of games.

    Returns:
        tuple: the first is the probability of win when first play,
        and the second the probability of win when second play.
    &amp;quot;&amp;quot;&amp;quot;
    win_count = np.array([0, 0])
    for i in range(n_games):
        game_over = False
        n_tails = 0
        while not game_over:
            x = random.randint(0, 1)  # 1 indicates head and 0 tail
            if x == 1:
                game_over = True
            else:
                n_tails += 1
        win_count[n_tails % 2] += 1
    return win_count.astype(float) / n_games


if __name__ == &amp;quot;__main__&amp;quot;:
    n_games = 100000
    probs = simulate(n_games)
    print(probs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;程序的核心部分在于&lt;code&gt;simulate&lt;/code&gt;，每次游戏，出现正面游戏就结束，同时记录反面出现的次数，如果该次数为偶数，则先手为赢，否则后手为赢。最后程序返回一个元祖，第一个表示先手获胜的概率，第二个为后手获胜的概率。&lt;/p&gt;
&lt;p&gt;我们运行一下程序看看结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python code.py
[0.66436 0.33564]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们模拟了10万次游戏，程序返回的结果跟数学求解结果十分接近。&lt;/p&gt;
&lt;p&gt;至此文章就完了。在这里我通过一个简单的游戏说明了先手的好处，这告诉我们一个道理，主动出击获得先手优势往往更能够成功。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
