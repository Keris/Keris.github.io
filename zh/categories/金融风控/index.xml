<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>金融风控 | 杜利强</title>
    <link>https://keris.github.io/zh/categories/%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7/</link>
      <atom:link href="https://keris.github.io/zh/categories/%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7/index.xml" rel="self" type="application/rss+xml" />
    <description>金融风控</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Tue, 03 Mar 2020 17:28:08 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>金融风控</title>
      <link>https://keris.github.io/zh/categories/%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7/</link>
    </image>
    
    <item>
      <title>信用评分卡模型</title>
      <link>https://keris.github.io/zh/post/credit-score-card/</link>
      <pubDate>Tue, 03 Mar 2020 17:28:08 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/credit-score-card/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#信用评分卡模型&#34;&gt;信用评分卡模型&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#评分卡模型划分&#34;&gt;评分卡模型划分&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#如何利用评分卡对用户进行评分&#34;&gt;如何利用评分卡对用户进行评分？&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#小结&#34;&gt;小结&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#评分卡模型的开发&#34;&gt;评分卡模型的开发&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#评分卡模型开发流程&#34;&gt;评分卡模型开发流程&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#数据获取&#34;&gt;数据获取&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#eda&#34;&gt;EDA&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#数据预处理&#34;&gt;数据预处理&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#数据清洗&#34;&gt;数据清洗&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#变量分箱&#34;&gt;变量分箱&lt;/a&gt;
              &lt;ul&gt;
                &lt;li&gt;&lt;a href=&#34;#无监督分箱&#34;&gt;无监督分箱&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&#34;#有监督分箱&#34;&gt;有监督分箱&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&#34;#小结-1&#34;&gt;小结&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h2 id=&#34;信用评分卡模型&#34;&gt;信用评分卡模型&lt;/h2&gt;
&lt;p&gt;信用评分卡模型是一种最常见的金融风控手段。它是指根据客户的各种属性和行为数据构建一个信用评分模型，对客户进行信用评分，并据此决定是否给予授信以及授信的额度和利率，从而识别和减少在金融交易中存在的交易风险。&lt;/p&gt;
&lt;p&gt;以下为评分卡模型的示意图：&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;credit-score-card-demo.png&#34; data-caption=&#34;Credit Score Card Demo&#34;&gt;
&lt;img data-src=&#34;credit-score-card-demo.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Credit Score Card Demo
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;评分卡模型划分&#34;&gt;评分卡模型划分&lt;/h3&gt;
&lt;p&gt;在不同的业务阶段我们可以构建不同的评分卡模型。根据借贷时间，评分卡模型可以划分为以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;贷前：申请评分卡（Application score card），又称为A卡&lt;/li&gt;
&lt;li&gt;贷中：行为评分卡（Behavior score card），又称为B卡&lt;/li&gt;
&lt;li&gt;贷后：催收评分卡（Collection score card），又称为C卡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何利用评分卡对用户进行评分&#34;&gt;如何利用评分卡对用户进行评分？&lt;/h3&gt;
&lt;p&gt;一个用户的评分等于基准分加上对客户各个属性的评分。对前面给出的示意图中的例子而言：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;客户评分 = 基准分 + 年龄评分 + 性别评分 + 婚姻状况评分 + 学历评分 + 月收入评分
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现有一客户，其年龄为27岁，性别男，已婚，本科学历，月收入为10k，那么他的评分为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;223(基准分) + 8(年龄评分) + 4(性别评分) + 8(婚姻状况评分) + 8(学历评分) + 13(月收入评分) = 264
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;以上就是评分卡模型的具体用法。在前面的例子中，不难发现以下三个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何选择用户的属性？&lt;/li&gt;
&lt;li&gt;评分卡模型采用的是对属性的分段进行评分，那么如何进行有效的分段？&lt;/li&gt;
&lt;li&gt;如何对每个分段进行评分？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;评分卡模型的开发&#34;&gt;评分卡模型的开发&lt;/h2&gt;
&lt;h3 id=&#34;评分卡模型开发流程&#34;&gt;评分卡模型开发流程&lt;/h3&gt;
&lt;p&gt;信用评分卡模型的开发一般包括数据获取，EDA，数据预处理，变量筛选，模型开发及评估，生成评分卡模型，模型上线及监测。典型的开发流程图如下：&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;credit-score-card-flowchart.png&#34; data-caption=&#34;Credit Score Card Flowchart&#34;&gt;
&lt;img data-src=&#34;credit-score-card-flowchart.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;70%&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Credit Score Card Flowchart
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;数据获取&#34;&gt;数据获取&lt;/h4&gt;
&lt;p&gt;数据主要有两个来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金融机构自有数据：如用户的年龄，户籍，性别，收入，负债比，在本机构的借款和还款行为等&lt;/li&gt;
&lt;li&gt;第三方数据：如用户在其他机构的借贷行为，用户的消费行为数据等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;eda&#34;&gt;EDA&lt;/h4&gt;
&lt;p&gt;EDA为&lt;a href=&#34;https://en.wikipedia.org/wiki/Exploratory_data_analysis&#34;&gt;Exploratory Data Analysis&lt;/a&gt;的简写，即探索性数据分析。这个阶段旨在了解数据的主要特性，如字段的缺失情况，异常值情况，中位数，分布等。最后制定一个合理的数据预处理方案。&lt;/p&gt;
&lt;h4 id=&#34;数据预处理&#34;&gt;数据预处理&lt;/h4&gt;
&lt;p&gt;数据预处理主要包括数据清洗，变量分箱和WOE编码。&lt;/p&gt;
&lt;h4 id=&#34;数据清洗&#34;&gt;数据清洗&lt;/h4&gt;
&lt;p&gt;数据清洗主要是对数据中的缺失值和异常值进行处理。一般我们选择删除缺失率超过某个阈值&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;（如30%，50%等）的变量。&lt;/p&gt;
&lt;h4 id=&#34;变量分箱&#34;&gt;变量分箱&lt;/h4&gt;
&lt;p&gt;所谓的分箱定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对连续变量进行分段以离散化&lt;/li&gt;
&lt;li&gt;将离散变量的多个状态进行合并，减少离散变量的状态数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过分箱操作，我们达到了对变量分段的目的。&lt;/p&gt;
&lt;p&gt;常见的分箱类型如下：&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;binning.png&#34; data-caption=&#34;常见的变量分箱类型&#34;&gt;
&lt;img data-src=&#34;binning.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    常见的变量分箱类型
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h5 id=&#34;无监督分箱&#34;&gt;无监督分箱&lt;/h5&gt;
&lt;p&gt;无监督分箱主要包括三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等频分箱：把自变量的值按从小到大排序，将自变量的取值个数等分为&lt;code&gt;k&lt;/code&gt;部分，每部分作为一个分箱&lt;/li&gt;
&lt;li&gt;等距分箱：把自变量的值按从小到大排序，将自变量的取值范围分为&lt;code&gt;k&lt;/code&gt;个等距的区间，每个区间作为一个分箱&lt;/li&gt;
&lt;li&gt;聚类分箱：用&lt;code&gt;k-means&lt;/code&gt;等聚类法将自变量分为&lt;code&gt;k&lt;/code&gt;类，但需要在聚类过程中保证分箱的有序性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 无监督分箱仅考虑了各个变量自身的结构，并没有考虑自变量与目标变量之间的关系，因此这种分箱方法不一定会带来模型性能的提升。&lt;/p&gt;
&lt;h5 id=&#34;有监督分箱&#34;&gt;有监督分箱&lt;/h5&gt;
&lt;p&gt;有监督分箱主要包括Split分箱和Merge分箱。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Split分箱是一种自上而下的分箱方法，其和决策树比较相似，切分点的选择指标主要有entropy， gini指数和IV值等。&lt;/li&gt;
&lt;li&gt;Merge分箱是一种自下而上的分箱方法，常见的merge分箱为ChiMerge分箱。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ChiMerge分箱的基本思想是：&lt;em&gt;如果两个相邻区间具有相似的类分布，则合并它们，否则保持不变。ChiMerge通常采用卡方值来度量两相邻区间的类分布的相似性。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;计算卡方值的公式如下：&lt;/p&gt;
&lt;p&gt;$$
\chi^2 = \sum_{i=1}^2 \sum_{j=1}^k \frac{(A_{ij} - E_{ij})^2}{E_{ij}}
$$&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;$k =$ 类别数目&lt;/p&gt;
&lt;p&gt;$A_{ij} =$ 第 $i$ 个区间中第$j$个类别的样本数目&lt;/p&gt;
&lt;p&gt;$E_{ij} = A_{ij}$的期望频率$=\frac{R_i \times C_j}{N}$，$R_i =$第$i$区间的样本数目$= \sum_{j=1}^k A_{ij}$，$C_j = $第$j$个类别的样本数目$= \sum_{i=1}^2 A_{ij}$&lt;/p&gt;
&lt;p&gt;ChiMerge算法包含一个初始化步和一个自底向上的合并过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化：将需要离散化的属性的值按从小到大排序，将每个样本作为一个区间&lt;/li&gt;
&lt;li&gt;合并区间
&lt;ol&gt;
&lt;li&gt;计算每对相邻区间的$\chi^2$&lt;/li&gt;
&lt;li&gt;合并具有最小$\chi^2$的相邻区间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果所有相邻区间对的$\chi^2$超过了$\chi^2-threshold$，则停止，否则回到第2步&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何确定$\chi^2-threshold$？为此我们需要选择一个想要的显著性水平和自有度，然后通过查表或者公式获得对应的$\chi^2$。其中自由度为&lt;code&gt;类别数目 - 1&lt;/code&gt;，例如，当有3个类别时，自由度为2。&lt;/p&gt;
&lt;p&gt;除了使用$\chi^2-threshold$，还可以指定&lt;code&gt;最小区间数&lt;/code&gt;和&lt;code&gt;最大区间数&lt;/code&gt;来确保不会产生太少或者太多的区间。&lt;/p&gt;
&lt;p&gt;在金融风控中，当我们应用ChiMerge时，在初始化时往往有以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续值按升序排列，离散值首先转化为坏客户的占比，然后再按升序排列&lt;/li&gt;
&lt;li&gt;为了减少计算量，对于状态数大于某一阈值（建议为100）的变量，利用等频分箱进行粗分箱&lt;/li&gt;
&lt;li&gt;若有缺失值，则缺失值单独作为一个分箱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在分箱完后还会做进一步的处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于坏客户占比为0或者1的分箱进行合并（一个分箱内不能全为好客户或者坏客户）&lt;/li&gt;
&lt;li&gt;对于样本占比超过95%的箱子进行删除&lt;/li&gt;
&lt;li&gt;检查缺失分箱的坏客户比例是否和非缺失分箱相等，如果相等，进行合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;小结-1&#34;&gt;小结&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;分箱可以有效处理缺失值和异常值&lt;/li&gt;
&lt;li&gt;分箱后数据和模型会更稳定&lt;/li&gt;
&lt;li&gt;分箱可以简化逻辑回归模型，降低过拟合风险，提高泛化能力&lt;/li&gt;
&lt;li&gt;分箱将特征统一变换为类别型变量&lt;/li&gt;
&lt;li&gt;分箱后变量才可以使用标准的评分卡格式&lt;/li&gt;
&lt;/ol&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;阈值的选择需要根据实际情况确定。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
