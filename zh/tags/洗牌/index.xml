<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>洗牌 | 杜利强</title>
    <link>https://keris.github.io/zh/tags/%E6%B4%97%E7%89%8C/</link>
      <atom:link href="https://keris.github.io/zh/tags/%E6%B4%97%E7%89%8C/index.xml" rel="self" type="application/rss+xml" />
    <description>洗牌</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Tue, 01 Sep 2020 15:45:34 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>洗牌</title>
      <link>https://keris.github.io/zh/tags/%E6%B4%97%E7%89%8C/</link>
    </image>
    
    <item>
      <title>Fisher-Yates Shuffle</title>
      <link>https://keris.github.io/zh/post/fisher_yates_shuffle/</link>
      <pubDate>Tue, 01 Sep 2020 15:45:34 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/fisher_yates_shuffle/</guid>
      <description>&lt;p&gt;给定一段序列，对其进行洗牌，要求每种排列的可能性一样大。这样的问题在日常工作中还是挺常见的，如测试某个排序算法的性能，对给定的输入进行洗牌获得更多的输入情况。在这篇文章中，我主要介绍一下Fisher-Yates洗牌方法，并且仅介绍其现代版本。&lt;/p&gt;
&lt;h2 id=&#34;从右到左进行洗牌&#34;&gt;从右到左进行洗牌&lt;/h2&gt;
&lt;p&gt;这种洗牌的核心在于每次迭代时在前一半（包含当前位置）的元素中随机挑选一个，然后与当前位置的元素进行交换。&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 对n个元素的数组进行洗牌（索引为 0..n-1):
for i from n−1 downto 1 do
     j ← random integer such that 0 ≤ j ≤ i
     exchange a[j] and a[i]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python 实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random

def shuffle_v1(source):
	n = len(source)
	for i in range(n-1, 0, -1):
		j = random.randint(0, i)
		source[i], source[j] = source[j], source[i]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;从左到右进行洗牌&#34;&gt;从左到右进行洗牌&lt;/h2&gt;
&lt;p&gt;这种洗牌跟从右到左的方式无差别，区别在于从后一半（包含当前位置）的元素中随机选取一个，然后与当前位置的元素进行交换。&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 对n个元素的数组进行洗牌（索引为 0..n-1):
for i from 0 to n−2 do
     j ← random integer such that i ≤ j &amp;lt; n
     exchange a[i] and a[j]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;inside-out洗牌&#34;&gt;Inside-out洗牌&lt;/h2&gt;
&lt;p&gt;前面两种方法都是对数组进行原地修改，有时候我们需要返回洗牌后的结果，而保持原数据不变。为了高效，下面介绍一种在洗牌过程中包含初始化的方法。&lt;/p&gt;
&lt;p&gt;该方法的核心在于从前i个位置随机选择一个位置j，将新数组位置j的元素放入新数组i的位置，将原始数组位置i处的元素放入新数组j的位置。&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# To initialize an array a of n elements to a randomly shuffled copy of source, both 0-based:
  for i from 0 to n − 1 do
      j ← random integer such that 0 ≤ j ≤ i
      if j ≠ i
          a[i] ← a[j]
      a[j] ← source[i]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python 代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shuffle_inside_out(source):
	n = len(source)
	a = [0] * n
	for i in range(n):
		j = random.randint(0, i)
		a[i] = a[j]
		a[j] = source[i]
	return a
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
