<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | 杜利强</title>
    <link>https://keris.github.io/zh/tags/python/</link>
      <atom:link href="https://keris.github.io/zh/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Wed, 22 Apr 2020 14:50:10 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>Python</title>
      <link>https://keris.github.io/zh/tags/python/</link>
    </image>
    
    <item>
      <title>简单粗暴正则表达式</title>
      <link>https://keris.github.io/zh/post/pratical-regex-tutorial/</link>
      <pubDate>Wed, 22 Apr 2020 14:50:10 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/pratical-regex-tutorial/</guid>
      <description>&lt;p&gt;在工作和学习中我时不时会使用正则表达式处理一些文本分析任务，但仍觉得自己是个新手，熟手也算不上。但从现在开始，我想做个这方面的能手，写这篇文章即为开始，也希望能帮助到需要的朋友。写了这篇文章也不意味着我就成能手了，要专于此，路且长漫。俗话说，共欲善其事必先利其器，正则表达式就是这样一个值得利的工具，这篇文章试图提供一个短小简练的正则表达式参考手册。&lt;/p&gt;
&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#什么是正则表达式&#34;&gt;什么是正则表达式&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#正则表达式有什么用&#34;&gt;正则表达式有什么用&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#正则表达式的构成&#34;&gt;正则表达式的构成&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#需要做进一步解释的正则表达式&#34;&gt;需要做进一步解释的正则表达式&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#特殊标记嵌入&#34;&gt;特殊标记嵌入&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#零宽度正预测先行断言&#34;&gt;零宽度正预测先行断言&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#零宽度负预测先行断言&#34;&gt;零宽度负预测先行断言&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#零宽度正回顾后发断言&#34;&gt;零宽度正回顾后发断言&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#零宽度负回顾后发断言&#34;&gt;零宽度负回顾后发断言&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#正则表达式实例&#34;&gt;正则表达式实例&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#手机号码匹配&#34;&gt;手机号码匹配&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#手机卡---基础运营商&#34;&gt;手机卡 - 基础运营商&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#手机卡---虚拟运营商&#34;&gt;手机卡 - 虚拟运营商&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#物联网数据卡&#34;&gt;物联网数据卡&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#上网卡&#34;&gt;上网卡&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&#34;#手机号码正则表达式&#34;&gt;手机号码正则表达式&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#参考链接&#34;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h2 id=&#34;什么是正则表达式&#34;&gt;什么是正则表达式&lt;/h2&gt;
&lt;p&gt;正则表达式（简称为&lt;em&gt;regex&lt;/em&gt;）是一个由字符和特殊符号组成的字符串模式，它描述了一系列符合某个句法规则的字符串。正则表达式中的特殊符号称之为元字符。以下举几个例子来说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;搜索 v.s. 匹配&lt;/p&gt;
&lt;p&gt;匹配指的是判断一个字符串能否从开始位置全部或者部分地匹配某个模式。
搜索指的是在目标字符串的任意位置开始搜索匹配的模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;正则表达式模式&lt;/th&gt;
&lt;th&gt;匹配的字符串&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;td&gt;foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;abc123&lt;/td&gt;
&lt;td&gt;abc123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;正则表达式有什么用&#34;&gt;正则表达式有什么用&lt;/h2&gt;
&lt;p&gt;正则表达式是用来处理字符串的，想知道其有何用，不妨看看它的应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;许多文本编辑器、IDEs支持以正则表达式进行查找和替换&lt;/li&gt;
&lt;li&gt;许多编程语言支持正则表达式，如C++，Perl，Python，SQL&lt;/li&gt;
&lt;/ul&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;vscode-find-date.png&#34; data-caption=&#34;在Visual Studio Code中查找本文档里包含的日期&#34;&gt;
&lt;img data-src=&#34;vscode-find-date.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    在Visual Studio Code中查找本文档里包含的日期
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;正则表达式的构成&#34;&gt;正则表达式的构成&lt;/h2&gt;
&lt;p&gt;前面已经提到正则表达式由字符和特殊符号组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表示法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;正则表达式示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;literal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配文本字符串中的字面值&lt;em&gt;literal&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;re1|re2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配正则表达式re1或者re2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo|bar&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配任何字符（除了&lt;code&gt;\n&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b.b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配字符串开始部分&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^Dear&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配字符串终止部分&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/bin/.*sh$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配0次或者多次前面的正则表达式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[A-Za-z0-9]*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配1次或者多次前面的正则表达式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[a-z]+\.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配0次或者1次前面的正则表达式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;goo?&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{n}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配n次前面的正则表达式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[0-9]{3}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{m,n}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配m~n次前面的正则表达式&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[0-9]{5,9}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[...]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配来自字符集的任意单一字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[aeiou]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[..x-y..]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配x~y范围中的任意单一字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[0-9], [a-zA-Z]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[^...]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不匹配来自字符集的任一字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[^aeiou], [^0-9A-Za-z]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(*|+|?{})?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非贪婪版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.*?[a-z]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配封闭的正则表达式，然后另存为子组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;([0-9]{3})?, f(oo|u)bar&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;特殊符号&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以下特殊字符（&lt;strong&gt;前四个&lt;/strong&gt;）的大写形式对应相反的含义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表示法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;正则表达式示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等同于&lt;code&gt;[0-9]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;data\d+.txt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等同于&lt;code&gt;[0-9a-zA-Z_]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[A-Za-z]\w+&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等同于&lt;code&gt;[\n\t\r\v\f]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;of\sthe&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配任何单词边界&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\bThe\b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\N&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;反向引用已保存的子组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;price;\1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逐字匹配任何特殊字符c&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\.,\\,\*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\A(\Z)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等同于&lt;code&gt;^($)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\ADear&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;扩展表示法&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表示法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;正则表达式示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?iLmsux)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在正则表达式中嵌入一个或多个特殊“标记”参数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?x), (? im)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?:...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示一个匹配不用保存的分组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?:\w+\.)*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示仅由name标识而不是数字ID标识的正则分组匹配&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?P&amp;lt;data&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?P=name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在同一个字符串中匹配由&lt;code&gt;(?P&amp;lt;name&amp;gt;)&lt;/code&gt;分组的之前的文本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?P=data)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?#...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示注释&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?#comment)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?=...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;零宽度正预测先行断言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?=\.com)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?!...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;零宽度负预测先行断言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?!\.net)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?&amp;lt;=...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;零宽度正回顾后发断言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?&amp;lt;=800-)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?&amp;lt;!...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;零宽度负回顾后发断言&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?&amp;lt;!192\.168\.)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(?(id/name)Y|N)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果分组提供的id或者name存在，就返回正则表达式的条件匹配Y，否则返回N&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(?x), (? im)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;需要做进一步解释的正则表达式&#34;&gt;需要做进一步解释的正则表达式&lt;/h2&gt;
&lt;p&gt;在上一部分，我们了解了正则表达式的构成，其中有些需要做进一步的解释。&lt;/p&gt;
&lt;h3 id=&#34;特殊标记嵌入&#34;&gt;特殊标记嵌入&lt;/h3&gt;
&lt;p&gt;除了在&lt;code&gt;re.compile&lt;/code&gt;中传递&lt;code&gt;flags&lt;/code&gt;参数，我们可以利用&lt;code&gt;(?iLmsux)&lt;/code&gt;来嵌入特殊标记。以下举几个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;(?i)yes&#39;, &#39;yes? Yes. YES!!&#39;)
[&#39;yes&#39;, &#39;Yes&#39;, &#39;YES&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这个例子中，通过&lt;code&gt;(?i)&lt;/code&gt;实现了不区分大小写的正则搜索。&lt;/p&gt;
&lt;p&gt;再看一个支持多行并且不区分大小写的正则搜索例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;(?im)^th[\w ]+&#39;, &amp;quot;&amp;quot;&amp;quot;
... This line is the first,
... another line,
... that line, it&#39;s the best
...&amp;quot;&amp;quot;&amp;quot;)
[&#39;This line is the first&#39;, &#39;that line&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;零宽度正预测先行断言&#34;&gt;零宽度正预测先行断言&lt;/h3&gt;
&lt;p&gt;零宽度正预测先行断言即&lt;code&gt;(?=...)&lt;/code&gt;。举个例子加以说明。&lt;/p&gt;
&lt;p&gt;对正则表达式&lt;code&gt;(?=\.com)&lt;/code&gt;而言，如果一个字符串后面&lt;strong&gt;跟着&lt;/strong&gt;&lt;code&gt;.com&lt;/code&gt;才做匹配操作，否则不进行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;(?m)\w+(?=\.com)&#39;, &amp;quot;&amp;quot;&amp;quot;
... https://www.google.com
... https://example.net
... &amp;quot;&amp;quot;&amp;quot;)
[&#39;google&#39;]
&lt;/code&gt;&lt;/pre&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;followed-by-dotcom.png&#34; data-caption=&#34;仅匹配后面跟着.com的字符串&#34;&gt;
&lt;img data-src=&#34;followed-by-dotcom.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    仅匹配后面跟着.com的字符串
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;零宽度负预测先行断言&#34;&gt;零宽度负预测先行断言&lt;/h3&gt;
&lt;p&gt;零宽度负预测先行断言即&lt;code&gt;(?!...)&lt;/code&gt;。举个例子加以说明。&lt;/p&gt;
&lt;p&gt;对正则表达式&lt;code&gt;\b(?!un)\w+\b&lt;/code&gt;而言，如果一个单词的开始后面&lt;strong&gt;没有跟着&lt;/strong&gt;&lt;code&gt;un&lt;/code&gt;才做匹配操作，否则不进行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;\b(?!un)\w+\b&#39;, &#39;unsure sure unity used&#39;)
[&#39;sure&#39;, &#39;used&#39;]
&lt;/code&gt;&lt;/pre&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;unfollowed-by-un.png&#34; data-caption=&#34;仅匹配单词开始后没有跟着un的字符串&#34;&gt;
&lt;img data-src=&#34;unfollowed-by-un.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    仅匹配单词开始后没有跟着un的字符串
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;零宽度正回顾后发断言&#34;&gt;零宽度正回顾后发断言&lt;/h3&gt;
&lt;p&gt;零宽度正回顾后发断言即&lt;code&gt;(?&amp;lt;=...)&lt;/code&gt;。举个例子以说明。&lt;/p&gt;
&lt;p&gt;对于正则表达式&lt;code&gt;(?&amp;lt;=19)\d{2}\b&lt;/code&gt;而言，如果某个四位数字以19开始，则进行匹配，否则不进行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;(?&amp;lt;=19)\d{2}\b&#39;, &#39;1851 1999 1950 1905 2003&#39;)
[&#39;99&#39;, &#39;50&#39;, &#39;05&#39;]
&lt;/code&gt;&lt;/pre&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;preceded-by-19.png&#34; data-caption=&#34;仅对以19开始的四位数字进行匹配操作&#34;&gt;
&lt;img data-src=&#34;preceded-by-19.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    仅对以19开始的四位数字进行匹配操作
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;零宽度负回顾后发断言&#34;&gt;零宽度负回顾后发断言&lt;/h3&gt;
&lt;p&gt;零宽度负回顾后发断言即&lt;code&gt;(?&amp;lt;!...)&lt;/code&gt;。举个例子以说明。&lt;/p&gt;
&lt;p&gt;对于正则表达式&lt;code&gt;(?&amp;lt;!19)\d{2}\b&lt;/code&gt;而言，如果某个四位数字不以19开始，则进行匹配，否则不进行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; re.findall(r&#39;(?&amp;lt;=19)\d{2}\b&#39;, &#39;1851 1999 1950 1905 2003&#39;)
[&#39;51&#39;, &#39;03&#39;]
&lt;/code&gt;&lt;/pre&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;not-preceded-by-19.png&#34; data-caption=&#34;仅对不以19开始的四位数字进行匹配操作&#34;&gt;
&lt;img data-src=&#34;not-preceded-by-19.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    仅对不以19开始的四位数字进行匹配操作
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;正则表达式实例&#34;&gt;正则表达式实例&lt;/h2&gt;
&lt;h3 id=&#34;手机号码匹配&#34;&gt;手机号码匹配&lt;/h3&gt;
&lt;p&gt;手机号码校验是一个十分常见的应用场景，利用正则表达式可以很好地应对这个任务。要写出这样一个目的的正则表达式，我们需要先了解手机号码的构成情况。&lt;/p&gt;
&lt;p&gt;中国境内的手机号码由三家移动运营商提供，即中国移动，中国联通和中国电信。手机号码由11位的数字组成，第一位是1，可以根据前三位来区分运营商，但现在由于携号转网的支持（2019年12月1日开始），该规则将不再适用。&lt;/p&gt;
&lt;h4 id=&#34;手机卡---基础运营商&#34;&gt;手机卡 - 基础运营商&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持语音通话 / 短信 / 数据流量&lt;/li&gt;
&lt;li&gt;号码长度 11 位&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运营商&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;号段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中国移动&lt;/td&gt;
&lt;td&gt;134-0~8 / 135 / 136 / 137 / 138 / 139 / 150 / 151 / 152 / 157 / 158 / 159 / 172 / 178 / 182 / 183 / 184 / 187 / 188 / 195 / 197 / 198&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国联通&lt;/td&gt;
&lt;td&gt;130 / 131 / 132 / 155 / 156 / 166 / 175 / 176 / 185 / 186 / 196&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国电信&lt;/td&gt;
&lt;td&gt;133 / 134-9 / 153 / 173 / 174-00~05 / 177 / 180 / 181 / 189 / 190 / 191 / 193 / 199&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国广电&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;北京船舶通信导航有限公司（海事卫星通信）&lt;/td&gt;
&lt;td&gt;174-9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工业和信息化部应急通信保障中心（应急通信）&lt;/td&gt;
&lt;td&gt;174-06~12&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;手机卡---虚拟运营商&#34;&gt;手机卡 - 虚拟运营商&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持语音通话 / 短信 / 数据流量&lt;/li&gt;
&lt;li&gt;号码长度 11 位&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运营商&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;号段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中国移动&lt;/td&gt;
&lt;td&gt;165 / 1703 / 1705 / 1706&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国联通&lt;/td&gt;
&lt;td&gt;167 / 1704 / 1707 / 1708 / 1709 / 171&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国电信&lt;/td&gt;
&lt;td&gt;162 / 1700 / 1701 / 1702&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;物联网数据卡&#34;&gt;物联网数据卡&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持数据流量&lt;/li&gt;
&lt;li&gt;号码长度 13 位&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运营商&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;号段&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中国移动&lt;/td&gt;
&lt;td&gt;1440X / 148XX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国联通&lt;/td&gt;
&lt;td&gt;146XX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国电信&lt;/td&gt;
&lt;td&gt;1410X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;上网卡&#34;&gt;上网卡&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;支持语音通话（部分） / 短信 / 数据流量&lt;/li&gt;
&lt;li&gt;号码长度 11 位&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运营商&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;th&gt;号段&lt;/th&gt;
&lt;th&gt;语音通话&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中国移动&lt;/td&gt;
&lt;td&gt;147&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国联通&lt;/td&gt;
&lt;td&gt;145&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国电信&lt;/td&gt;
&lt;td&gt;149&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;手机号码正则表达式&#34;&gt;手机号码正则表达式&lt;/h4&gt;
&lt;p&gt;基于前面的信息，我们可以写一个能够匹配所有手机号的正则表达式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^(?:\+?86)?1(?:[38]\d{3}|5[^4\D]\d{2}|7(?:[235-8]\d{2}|4(?:[09]\d|1[0-2]))|9[0-35-9]\d{2}|66\d{2})\d{6}$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上正则表达式的可视化&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;如下：&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;chinese-phone-no-regex.png&#34; data-caption=&#34;中国手机号码正则表达式&#34;&gt;
&lt;img data-src=&#34;chinese-phone-no-regex.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;图&#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    中国手机号码正则表达式
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference?redirectedfrom=MSDN&#34;&gt;微软：正则表达式语言-快速参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jb51.net/tools/zhengze.html&#34;&gt;脚本之家：正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/VincentSit/ChinaMobilePhoneNumberRegex/blob/master/README-CN.md&#34;&gt;VincentSit：中国手机号码正则&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;由于携号转网在部分地区已经试行，对于成功进行携号转网的用户，手机号段不再能体现其当前所属运营商。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;根据工信部相关文件，145 / 147 / 149 号段允许提供语音通话功能，运营商可以根据用户需要自主决定是否提供语音通话功能。目前 147 / 149 号段已经有支持语音通话的号码卡放出。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;可视化由网站https://www.debuggex.com/生成。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>硬币投掷模拟实验</title>
      <link>https://keris.github.io/zh/post/coin-toss-experiment/</link>
      <pubDate>Sat, 04 Apr 2020 17:53:27 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/coin-toss-experiment/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import numpy as np
import random
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;掷硬币模拟实验一&#34;&gt;掷硬币模拟实验一&lt;/h2&gt;
&lt;p&gt;假设一枚硬币落地后正面朝上的概率为$p$，进行$n$次投掷。通过模拟实验验证正面朝上的比例将随着投掷次数的增加越来越接近$p$。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 进行一次投掷，如果返回True则表示获得正面，否则反面
def make_a_toss(p):
    r = random.randint(1, 100)
    return r &amp;lt;= (100*p)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def simulate1(p, n=1000):
    heads = []
    count = 0
    for i in range(n):
        if make_a_toss(p):
            count += 1
        heads.append(count)
    x = np.array(range(1, n + 1))
    y = np.array(heads).astype(np.float32) / x
    plt.plot(x, y)
    plt.plot(x, np.ones(n) * p)
    plt.xlabel(&#39;The number of tosses&#39;)
    plt.ylabel(&#39;The proportion of heads&#39;)
    plt.title(f&#39;p = {p}&#39;)
    plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# p=0.3
simulate1(0.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_4_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# p=0.03
simulate1(.03, 10000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_5_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;掷硬币模拟实验二&#34;&gt;掷硬币模拟实验二&lt;/h2&gt;
&lt;p&gt;假设一枚硬币落地后正面朝上的概率为$p$，进行$n$次投掷，定义$X$为正面朝上的次数。通过模拟实验验证$X$将随着实验次数的增加越来越接近$np$。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def moving_avg(x):
    result = np.array([.0] * len(x))
    s = 0
    for i, v in enumerate(x):
        s += v
        result[i] = s / (i + 1)
    return result
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def simulate2(p, n=1000):

    def one_experiment():
        heads = 0
        for i in range(n):
            if make_a_toss(p):
                heads += 1
        return heads

    heads = []
    for _ in range(1000): # do 1000 experiments
        heads.append(one_experiment())
    x = np.array(range(1, 1001))
    y = moving_avg(heads)
    plt.plot(x, y)
    plt.plot(x, np.ones(1000) * p * n)
    plt.xlabel(&#39;The number of experiments&#39;)
    plt.ylabel(&#39;The number of heads&#39;)
    plt.title(f&#39;p = {p}&#39;)
    plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# p=0.3, n=10
simulate2(0.3, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_9_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# p=0.3, n=100
simulate2(0.3, 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_10_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# p=0.3, n=1000
simulate2(0.3, 1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
