<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; | 杜利强</title>
    <link>https://keris.github.io/zh/tags/c&#43;&#43;/</link>
      <atom:link href="https://keris.github.io/zh/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <description>C&#43;&#43;</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Tue, 17 Mar 2020 10:13:02 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>C&#43;&#43;</title>
      <link>https://keris.github.io/zh/tags/c&#43;&#43;/</link>
    </image>
    
    <item>
      <title>一个例子导向的对变参模版的理解</title>
      <link>https://keris.github.io/zh/post/variadic-template/</link>
      <pubDate>Tue, 17 Mar 2020 10:13:02 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/variadic-template/</guid>
      <description>&lt;p&gt;最近看C++编程语言第四版&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，阅读到线程这一章，作者在讲解mutex时给出了一个例子，自己照着写了一个发现跑不通，研究后发现对变参模版理解不够，便写了这篇文章。&lt;/p&gt;
&lt;p&gt;首先，我们看看书本上的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;mutex cout_mutex;

template&amp;lt;typename Arg, typename... Args&amp;gt;
void write(Arg a, Args... tail) {
    cout_mutex.lock();
    cout &amp;lt;&amp;lt; a;
    write(tail...);
    cout_mutex.unlock();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个例子旨在说明deadlock，因为我们在&lt;code&gt;write&lt;/code&gt;函数中递归调用它，而该函数在进行输出前需要获取互斥变量。为了解除死锁，我们可以使用&lt;code&gt;recursive_mutex&lt;/code&gt;，这种类型的mutex允许递归地获取。&lt;/p&gt;
&lt;p&gt;基于以上想法，我写了一个例子来进行测试：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;mutex&amp;gt;

using namespace std;

recursive_mutex cout_mutex;

template&amp;lt;typename Arg, typename... Args&amp;gt;
void write(Arg a, Args... tail) {
    cout_mutex.lock();
    cout &amp;lt;&amp;lt; a;
    write(tail...);
    cout_mutex.unlock();
}

int main(int argc, char* argv[]) {
    write(&amp;quot;hello,&amp;quot;, &amp;quot;world&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当我尝试编译以上代码却发现报出错误：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ g++ test.cc -std=c++17
test.cpp:12:6: error: no matching function for call to &#39;write&#39;
     write(tail...);
     ^~~~~
test.cpp:12:6: note: in instantiation of function template
      specialization &#39;write&amp;lt;const char *&amp;gt;&#39; requested here
test.cpp:17:6: note: in instantiation of function template
      specialization &#39;write&amp;lt;const char *, const char *&amp;gt;&#39; requested here
     write(&amp;quot;hello,&amp;quot;, &amp;quot;world&amp;quot;);
     ^
test.cpp:9:7: note: candidate function template not viable: requires at
      least argument &#39;a&#39;, but no arguments were provided
 void write(Arg a, Args... tail) {
      ^
1 error generated.
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;在编译时我使用了c++17标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到，编译器报告了一个错误，&lt;strong&gt;对&#39;write&#39;的调用没有匹配的函数&lt;/strong&gt;，这是为何？&lt;/p&gt;
&lt;p&gt;对于以上的实现，&lt;code&gt;write(&amp;quot;hello,&amp;quot;, &amp;quot;world&amp;quot;)&lt;/code&gt;可以拆分成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输出&lt;code&gt;hello,&lt;/code&gt;，此时tail包含一个参数即&lt;code&gt;world&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输出&lt;code&gt;world&lt;/code&gt;，此时tail为空，但write函数至少需要一个参数，所以产生以上错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面我们增加一个接受空参数的write函数来验证：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;mutex&amp;gt;

using namespace std;

recursive_mutex cout_mutex;

void write() {
    cout &amp;lt;&amp;lt; &amp;quot;&amp;quot;; // output nothing
}

template&amp;lt;typename Arg, typename... Args&amp;gt;
void write(Arg a, Args... tail) {
    cout_mutex.lock();
    cout &amp;lt;&amp;lt; a;
    write(tail...);
    cout_mutex.unlock();
}


int main(int argc, char* argv[]) {
    write(&amp;quot;hello,&amp;quot;, &amp;quot;world&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在进行上述操作后，代码编译通过，运行后输出以下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./a.out
$ hello,world
&lt;/code&gt;&lt;/pre&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;英文名为：&lt;a href=&#34;https://www.amazon.com/dp/0321958322/ref=cm_sw_em_r_mt_dp_U_xP11DbJ5REYKZ&#34;&gt;The C++ Programming Language, 4th Edition&lt;/a&gt;. 作者为Bjarne Stroustrup. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
