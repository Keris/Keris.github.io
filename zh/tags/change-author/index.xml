<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>change-author | 杜利强</title>
    <link>https://keris.github.io/zh/tags/change-author/</link>
      <atom:link href="https://keris.github.io/zh/tags/change-author/index.xml" rel="self" type="application/rss+xml" />
    <description>change-author</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Thu, 07 Nov 2019 17:47:23 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>change-author</title>
      <link>https://keris.github.io/zh/tags/change-author/</link>
    </image>
    
    <item>
      <title>更改git提交中的作者和邮件信息</title>
      <link>https://keris.github.io/zh/post/change-author-name-email/</link>
      <pubDate>Thu, 07 Nov 2019 17:47:23 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/change-author-name-email/</guid>
      <description>&lt;p&gt;在git的日常使用中更改提交的作者名和邮箱是一个十分常见的操作。例如，当你克隆了一个项目，如果你没有进行任何设置，此时提交的作者和邮件将使用全局选项，这可能不是你所要的。&lt;/p&gt;
&lt;p&gt;通过本文你将了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何配置git使用的提交者用户名和邮箱&lt;/li&gt;
&lt;li&gt;如何更改最近一次提交的作者名和邮件&lt;/li&gt;
&lt;li&gt;批量更改提交的作者名和邮件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置提交者用户名和邮箱&#34;&gt;配置提交者用户名和邮箱&lt;/h2&gt;
&lt;p&gt;你有两种方式进行设置，一是全局配置，二是为每个repo单独配置。&lt;/p&gt;
&lt;h3 id=&#34;全局地更改提交者用户名和邮箱&#34;&gt;全局地更改提交者用户名和邮箱&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;git config&lt;/code&gt;并&lt;code&gt;--global&lt;/code&gt;选项进行全局设置，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global user.name &amp;quot;Du Liqiang&amp;quot;
$ git config --global user.email &amp;quot;dlq137@gmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置完毕后，后续的提交将使用以上提供的信息。&lt;/p&gt;
&lt;h3 id=&#34;为某个repo单独配置&#34;&gt;为某个repo单独配置&lt;/h3&gt;
&lt;p&gt;全局选项可能并不适用于某个repo，此时就需要单独设置，使用&lt;code&gt;git config&lt;/code&gt;但省略&lt;code&gt;--global&lt;/code&gt;选项，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config user.name &amp;quot;Du Liqiang&amp;quot;
$ git config user.email &amp;quot;dlq137@gmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的设置将覆盖全局选项，并且只应用于当前的repo。&lt;/p&gt;
&lt;h2 id=&#34;更改最近一次提交的作者用户名和邮箱&#34;&gt;更改最近一次提交的作者用户名和邮箱&lt;/h2&gt;
&lt;p&gt;如果你刚做了一次提交，发现用户名和邮箱并不是所要的，你可以使用&lt;code&gt;--amend&lt;/code&gt;选项重新提交：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git commit --amend --author=&amp;quot;Du Liqiang &amp;lt;dlq137@gmail.com&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;更改多次提交的作者用户名和邮箱&#34;&gt;更改多次提交的作者用户名和邮箱&lt;/h2&gt;
&lt;p&gt;这个时候我们需要借助强大的&lt;code&gt;rebase&lt;/code&gt;命令，首先我们找到上一次“好”的提交&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，并假设其提交hash为&lt;code&gt;0ad14fa5&lt;/code&gt;，执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git rebase -i -p 0ad14fa5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们会进入一个编辑器，将那些需要编辑的提交全标记为&lt;code&gt;edit&lt;/code&gt;，接下来git会指导你完成每次提交的编辑，你需要做的就是执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit --amend --author=&amp;quot;Du Liqiang &amp;lt;dlq137@gmail.com&amp;gt; --no-edit
$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用git-filter-branch批量更改&#34;&gt;使用git filter-branch批量更改&lt;/h2&gt;
&lt;p&gt;除了以上交互式的更改方法，另一种方法是借助git的&lt;code&gt;filter-branch&lt;/code&gt;命令，其允许你使用一个script批量处理大量的提交。&lt;/p&gt;
&lt;p&gt;如下命令筛选提交邮箱为WRONG_EMAIL的提交，并将其用户名和邮箱分别设置为NEW_NAME和NEW_EMAIL对应的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git filter-branch --env-filter &#39;
WRONG_EMAIL=&amp;quot;wrong@example.com&amp;quot;
NEW_NAME=&amp;quot;New Name Value&amp;quot;
NEW_EMAIL=&amp;quot;correct@example.com&amp;quot;

if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$WRONG_EMAIL&amp;quot; ]
then
    export GIT_COMMITTER_NAME=&amp;quot;$NEW_NAME&amp;quot;
    export GIT_COMMITTER_EMAIL=&amp;quot;$NEW_EMAIL&amp;quot;
fi
if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$WRONG_EMAIL&amp;quot; ]
then
    export GIT_AUTHOR_NAME=&amp;quot;$NEW_NAME&amp;quot;
    export GIT_AUTHOR_EMAIL=&amp;quot;$NEW_EMAIL&amp;quot;
fi
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.git-tower.com/learn/git/faq/change-author-name-email&#34;&gt;https://www.git-tower.com/learn/git/faq/change-author-name-email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;该次提交之前的提交具有正确的用户名和邮箱，其后的需要进行更改。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
