<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杜利强</title>
    <link>https://keris.github.io/zh/</link>
      <atom:link href="https://keris.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    <description>杜利强</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language><lastBuildDate>Wed, 26 Feb 2020 15:41:30 +0800</lastBuildDate>
    <image>
      <url>https://keris.github.io/images/icon_hu0fc6cda6d9ee8f97aed5fca718c40606_62996_512x512_fill_lanczos_center_2.png</url>
      <title>杜利强</title>
      <link>https://keris.github.io/zh/</link>
    </image>
    
    <item>
      <title>RFM模型及实践</title>
      <link>https://keris.github.io/zh/post/what-is-rfm-model/</link>
      <pubDate>Wed, 26 Feb 2020 15:41:30 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/what-is-rfm-model/</guid>
      <description>&lt;p&gt;RFM是一种用于分析客户价值的方法，常用于营销。其中RFM代表三个维度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;ecency 表示最近一次客户购买的时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt;requency 表示在统计周期内客户购买的次数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;onetary Value 表示统计周期内客户消费的总金额&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来，我们使用RFM模型分析一个真实的&lt;a href=&#34;https://www.kaggle.com/carrie1/ecommerce-data#data.csv&#34;&gt;在线购物数据&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import squarify
from datetime import timedelta
import seaborn as sns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Read dataset
online = pd.read_csv(&#39;data.csv&#39;, encoding=&#39;ISO-8859-1&#39;)
online.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;InvoiceNo&lt;/th&gt;
      &lt;th&gt;StockCode&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;InvoiceDate&lt;/th&gt;
      &lt;th&gt;UnitPrice&lt;/th&gt;
      &lt;th&gt;CustomerID&lt;/th&gt;
      &lt;th&gt;Country&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;536365&lt;/td&gt;
      &lt;td&gt;85123A&lt;/td&gt;
      &lt;td&gt;WHITE HANGING HEART T-LIGHT HOLDER&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;12/1/2010 8:26&lt;/td&gt;
      &lt;td&gt;2.55&lt;/td&gt;
      &lt;td&gt;17850.0&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;536365&lt;/td&gt;
      &lt;td&gt;71053&lt;/td&gt;
      &lt;td&gt;WHITE METAL LANTERN&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;12/1/2010 8:26&lt;/td&gt;
      &lt;td&gt;3.39&lt;/td&gt;
      &lt;td&gt;17850.0&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;536365&lt;/td&gt;
      &lt;td&gt;84406B&lt;/td&gt;
      &lt;td&gt;CREAM CUPID HEARTS COAT HANGER&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;12/1/2010 8:26&lt;/td&gt;
      &lt;td&gt;2.75&lt;/td&gt;
      &lt;td&gt;17850.0&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;536365&lt;/td&gt;
      &lt;td&gt;84029G&lt;/td&gt;
      &lt;td&gt;KNITTED UNION FLAG HOT WATER BOTTLE&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;12/1/2010 8:26&lt;/td&gt;
      &lt;td&gt;3.39&lt;/td&gt;
      &lt;td&gt;17850.0&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;536365&lt;/td&gt;
      &lt;td&gt;84029E&lt;/td&gt;
      &lt;td&gt;RED WOOLLY HOTTIE WHITE HEART.&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;12/1/2010 8:26&lt;/td&gt;
      &lt;td&gt;3.39&lt;/td&gt;
      &lt;td&gt;17850.0&lt;/td&gt;
      &lt;td&gt;United Kingdom&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;online.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;InvoiceNo       object
StockCode       object
Description     object
Quantity         int64
InvoiceDate     object
UnitPrice      float64
CustomerID     float64
Country         object
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Convert InvoiceDate from object to datetime format
online[&#39;InvoiceDate&#39;] = pd.to_datetime(online[&#39;InvoiceDate&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;online.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;InvoiceNo              object
StockCode              object
Description            object
Quantity                int64
InvoiceDate    datetime64[ns]
UnitPrice             float64
CustomerID            float64
Country                object
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check how many rows and columns
online.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(541909, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Count transactions that don&#39;t have a customer id
print(&#39;{:,} transactions don\&#39;t have a customer id&#39;
     .format(online[online.CustomerID.isnull()].shape[0]))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;135,080 transactions don&#39;t have a customer id
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check invoice date range
print(&#39;Transactions timeframe from {} to {}&#39;
     .format(online.InvoiceDate.min(), online.InvoiceDate.max()))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Transactions timeframe from 2010-12-01 08:26:00 to 2011-12-09 12:50:00
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop NA values from online
online.dropna(inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Group data by CustomerID

# Create TotalSum column for online dataset
online[&#39;TotalSum&#39;] = online[&#39;Quantity&#39;] * online[&#39;UnitPrice&#39;]

# Create snapshot date
snapshot_date = online.InvoiceDate.max() + timedelta(days=1)
print(snapshot_date)

# Group by CustomerID
data = online.groupby([&#39;CustomerID&#39;]).agg({
    &#39;InvoiceDate&#39;: lambda x: (snapshot_date - x.max()).days,
    &#39;InvoiceNo&#39;: &#39;count&#39;,
    &#39;TotalSum&#39;: &#39;sum&#39;
})

data.rename(columns={&#39;InvoiceDate&#39;: &#39;Recency&#39;,
                     &#39;InvoiceNo&#39;: &#39;Frequency&#39;,
                     &#39;TotalSum&#39;: &#39;MonetaryValue&#39;}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2011-12-10 12:50:00
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Peek first 5 rows
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Recency&lt;/th&gt;
      &lt;th&gt;Frequency&lt;/th&gt;
      &lt;th&gt;MonetaryValue&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CustomerID&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;12346.0&lt;/th&gt;
      &lt;td&gt;326&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12347.0&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;182&lt;/td&gt;
      &lt;td&gt;4310.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12348.0&lt;/th&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1797.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12349.0&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;1757.55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12350.0&lt;/th&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;334.40&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Check how many rows and columns
data.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(4372, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这里我们可以看到，根据CutomerID进行分组后，我们聚合生成了每个客户最近一次购买的时间，购买频率和消费额度，共4372条记录。接下来，我们需要对这三个维度进行打分，这可以通过&lt;code&gt;.qcut()&lt;/code&gt;来进行。但在此之前，我们先看一看特征的分布情况。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Plot RFM distributions
plt.figure(figsize=(12,10))

# Plot distribution of R
plt.subplot(3, 1, 1)
sns.distplot(data[&#39;Recency&#39;])

# Plot distribution of F
plt.subplot(3, 1, 2)
sns.distplot(data[&#39;Frequency&#39;])

# Plot distribution of M
plt.subplot(3, 1, 3)
sns.distplot(data[&#39;MonetaryValue&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1199779b0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_13_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calculate R and F groups

# Create labels for Recency and Frequency
r_labels = range(4, 0, -1)
f_labels = range(1, 5)

# Assign these labels to 4 equal percentil groups
r_groups = pd.qcut(data[&#39;Recency&#39;], q=4, labels=r_labels)

f_groups = pd.qcut(data[&#39;Frequency&#39;], q=4, labels=f_labels)

# Create new columns R and F
data = data.assign(R=r_groups.values, F=f_groups.values)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Recency&lt;/th&gt;
      &lt;th&gt;Frequency&lt;/th&gt;
      &lt;th&gt;MonetaryValue&lt;/th&gt;
      &lt;th&gt;R&lt;/th&gt;
      &lt;th&gt;F&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CustomerID&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;12346.0&lt;/th&gt;
      &lt;td&gt;326&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12347.0&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;182&lt;/td&gt;
      &lt;td&gt;4310.00&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12348.0&lt;/th&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1797.24&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12349.0&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;1757.55&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12350.0&lt;/th&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;334.40&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create labels form MonetaryValue
m_labels = range(1, 5)
m_groups = pd.qcut(data[&#39;MonetaryValue&#39;], q=4, labels=m_labels)
data = data.assign(M=m_groups.values)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Recency&lt;/th&gt;
      &lt;th&gt;Frequency&lt;/th&gt;
      &lt;th&gt;MonetaryValue&lt;/th&gt;
      &lt;th&gt;R&lt;/th&gt;
      &lt;th&gt;F&lt;/th&gt;
      &lt;th&gt;M&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CustomerID&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;12346.0&lt;/th&gt;
      &lt;td&gt;326&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12347.0&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;182&lt;/td&gt;
      &lt;td&gt;4310.00&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12348.0&lt;/th&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1797.24&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12349.0&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;1757.55&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12350.0&lt;/th&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;334.40&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Concat RFM quartile values to create RFM segments
def join_rfm(x):
    return str(x[&#39;R&#39;]) + str(x[&#39;F&#39;]) + str(x[&#39;M&#39;])

data[&#39;RFM_segment_concat&#39;] = data.apply(join_rfm, axis=1)
rfm = data
rfm.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Recency&lt;/th&gt;
      &lt;th&gt;Frequency&lt;/th&gt;
      &lt;th&gt;MonetaryValue&lt;/th&gt;
      &lt;th&gt;R&lt;/th&gt;
      &lt;th&gt;F&lt;/th&gt;
      &lt;th&gt;M&lt;/th&gt;
      &lt;th&gt;RFM_segment_concat&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CustomerID&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;12346.0&lt;/th&gt;
      &lt;td&gt;326&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12347.0&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;182&lt;/td&gt;
      &lt;td&gt;4310.00&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12348.0&lt;/th&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1797.24&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;224&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12349.0&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;1757.55&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;334&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12350.0&lt;/th&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;334.40&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;112&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Count num of unique segments
rfm_count_unique = rfm.groupby(&#39;RFM_segment_concat&#39;)[&#39;RFM_segment_concat&#39;].nunique()
print(rfm_count_unique.sum())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;62
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上结果显示，将RFM连接在一起这种方法共形成62个划分，但划分太多了不能用于实际应用。下面我们尝试将这三个值相加。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calculate RFM_Score
rfm[&#39;RFM_Score&#39;] = rfm[[&#39;R&#39;, &#39;F&#39;, &#39;M&#39;]].sum(axis=1)
print(rfm[&#39;RFM_Score&#39;].head())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;CustomerID
12346.0     3.0
12347.0    12.0
12348.0     8.0
12349.0    10.0
12350.0     4.0
Name: RFM_Score, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Define rfm_level function
def rfm_level(df):
    if df[&#39;RFM_Score&#39;] &amp;gt;= 9:
        return &#39;Can\&#39;t Loose Them&#39;
    elif ((df[&#39;RFM_Score&#39;] &amp;gt;= 8) and (df[&#39;RFM_Score&#39;] &amp;lt; 9)):
        return &#39;Champions&#39;
    elif ((df[&#39;RFM_Score&#39;] &amp;gt;= 7) and (df[&#39;RFM_Score&#39;] &amp;lt; 8)):
        return &#39;Loyal&#39;
    elif ((df[&#39;RFM_Score&#39;] &amp;gt;= 6) and (df[&#39;RFM_Score&#39;] &amp;lt; 7)):
        return &#39;Potential&#39;
    elif ((df[&#39;RFM_Score&#39;] &amp;gt;= 5) and (df[&#39;RFM_Score&#39;] &amp;lt; 6)):
        return &#39;Promising&#39;
    elif ((df[&#39;RFM_Score&#39;] &amp;gt;= 4) and (df[&#39;RFM_Score&#39;] &amp;lt; 5)):
        return &#39;Needs Attention&#39;
    else:
        return &#39;Require Activation&#39;

# Create a new variable RFM_Level
rfm[&#39;RFM_Level&#39;] = rfm.apply(rfm_level, axis=1)

rfm.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Recency&lt;/th&gt;
      &lt;th&gt;Frequency&lt;/th&gt;
      &lt;th&gt;MonetaryValue&lt;/th&gt;
      &lt;th&gt;R&lt;/th&gt;
      &lt;th&gt;F&lt;/th&gt;
      &lt;th&gt;M&lt;/th&gt;
      &lt;th&gt;RFM_segment_concat&lt;/th&gt;
      &lt;th&gt;RFM_Score&lt;/th&gt;
      &lt;th&gt;RFM_Level&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CustomerID&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;12346.0&lt;/th&gt;
      &lt;td&gt;326&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;Require Activation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12347.0&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;182&lt;/td&gt;
      &lt;td&gt;4310.00&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;Can&#39;t Loose Them&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12348.0&lt;/th&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;1797.24&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;224&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;Champions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12349.0&lt;/th&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;1757.55&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;334&lt;/td&gt;
      &lt;td&gt;10.0&lt;/td&gt;
      &lt;td&gt;Can&#39;t Loose Them&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12350.0&lt;/th&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;334.40&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;112&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;Needs Attention&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calculate average values for each RFM_Level, and return a size of each segment
rfm_level_agg = rfm.groupby(&#39;RFM_Level&#39;).agg({
    &#39;Recency&#39;: &#39;mean&#39;,
    &#39;Frequency&#39;: &#39;mean&#39;,
    &#39;MonetaryValue&#39;: [&#39;mean&#39;, &#39;count&#39;]
}).round(1)

# Print the aggregate dataset
print(rfm_level_agg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                   Recency Frequency MonetaryValue
                      mean      mean          mean count
RFM_Level
Can&#39;t Loose Them      25.2     195.1        4130.3  1690
Champions             62.7      57.0         974.7   467
Loyal                 78.8      39.7         724.2   447
Needs Attention      174.5      13.9         227.1   391
Potential             94.3      28.5         491.8   468
Promising            153.0      21.2         346.8   517
Require Activation   264.8       7.8         109.1   392
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从以上结果我们可以看到，约60%的客户属于优质客户（前三类用户）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Visualize segments
rfm_level_agg.columns = rfm_level_agg.columns.droplevel()
rfm_level_agg.columns = [&#39;RecencyMean&#39;, &#39;FrequencyMean&#39;, &#39;MonetaryMean&#39;, &#39;Count&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create our plot and resize it
fig = plt.gcf()
ax = fig.add_subplot()
fig.set_size_inches(16, 9)

squarify.plot(sizes=rfm_level_agg[&#39;Count&#39;], label=list(rfm_level_agg.index), alpha=.6)
plt.title(&#39;RFM Segments&#39;, fontsize=18, fontweight=&#39;bold&#39;)
plt.axis(&#39;off&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_25_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>逻辑回归（Logistic Regression）</title>
      <link>https://keris.github.io/zh/post/logistic-regression/</link>
      <pubDate>Tue, 14 Jan 2020 16:47:22 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/logistic-regression/</guid>
      <description>&lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#术语&#34;&gt;术语&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#logistic-function&#34;&gt;Logistic function&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#odds&#34;&gt;Odds&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#logit-function&#34;&gt;Logit function&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#逻辑回归&#34;&gt;逻辑回归&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#代价函数求导&#34;&gt;代价函数求导&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;
&lt;p&gt;逻辑回归涉及到以下术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logistic function&lt;/li&gt;
&lt;li&gt;Odds&lt;/li&gt;
&lt;li&gt;Logit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;logistic-function&#34;&gt;Logistic function&lt;/h3&gt;
&lt;p&gt;逻辑回归中的 &lt;em&gt;Logistic&lt;/em&gt; 正是出于 &lt;em&gt;Logistic function&lt;/em&gt; ，它是一种 &lt;em&gt;sigmoid function&lt;/em&gt; ，其接受任意实值，输出一个0到1之间的值。
&lt;em&gt;标准的&lt;/em&gt; logistic funtion 定义如下：&lt;/p&gt;
&lt;p&gt;$$\sigma(z) = \frac{e^z}{e^z + 1} = \frac{1}{1 + e^{-z}}$$&lt;/p&gt;
&lt;p&gt;如下是它在区间$[-6, 6]$之间的图像：&lt;/p&gt;
&lt;p&gt;&lt;a title=&#34;logistic function curve&#34; href=&#34;https://commons.wikimedia.org/wiki/File:Logistic-curve.svg&#34;&gt;&lt;img width=&#34;512&#34; alt=&#34;Logistic-curve&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Logistic-curve.svg/512px-Logistic-curve.svg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在逻辑回归中，我们使用对数几率（log odds），&lt;strong&gt;并假定它是输入特征的线性组合&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;$$z = \ln \frac{p(x)}{1 - p(x)}= \theta_0 + \theta_1 x_1 + \theta_2 x_2 = \theta^T \cdot x$$&lt;/p&gt;
&lt;p&gt;由上式我们可以得到，&lt;/p&gt;
&lt;p&gt;$$p(x) = \sigma(z) = \frac{1}{1 + e^{-\theta^T \cdot x}}$$&lt;/p&gt;
&lt;p&gt;在逻辑回归模型中，这里的 $p(x)$ 为因变量在成功情形下的概率，即 $p(y=1 \mid x)$。&lt;/p&gt;
&lt;h3 id=&#34;odds&#34;&gt;Odds&lt;/h3&gt;
&lt;p&gt;如果 $p$ 表示一个事件发生的概率，那么odds定义为&lt;/p&gt;
&lt;p&gt;$$\text{odds} = \frac{p}{1 - p}$$
也就是说，odds为发生的概率除以不发生的概率，亦可以说为成功的概率除以失败的概率。&lt;/p&gt;
&lt;h3 id=&#34;logit-function&#34;&gt;Logit function&lt;/h3&gt;
&lt;p&gt;Logit为Log odds, logit function 定义为 logistic function的逆，即 $g = \sigma^{-1}$。显而易见，我们有&lt;/p&gt;
&lt;p&gt;$$g(p(x)) = \sigma_{-1}(p(x)) = \text{logit}\,p(x) = \ln(\frac{p(x)}{1 - p(x)}) = \theta^T \cdot x$$&lt;/p&gt;
&lt;h2 id=&#34;逻辑回归&#34;&gt;逻辑回归&lt;/h2&gt;
&lt;p&gt;逻辑回归是一个重要的机器学习算法，其目标是基于给定的数据$x$输出随机变量$y$为0或1的概率。&lt;/p&gt;
&lt;p&gt;考虑由$\theta$参数化的线性模型，&lt;/p&gt;
&lt;p&gt;$$h_\theta(x) = \frac{1}{1 + e^{-\theta^T \cdot x}} = \text{Pr}(y = 1 \mid x;\theta)$$&lt;/p&gt;
&lt;p&gt;从而，$\text{Pr}(y=0 \mid x;\theta) = 1 - h_\theta(x)$。&lt;/p&gt;
&lt;p&gt;因为$y \in \{0, 1 \}$，我们有&lt;/p&gt;
&lt;p&gt;$$\text{Pr}(y \mid x;\theta) = h_\theta(x)^y (1 - h_\theta(x))^{1 - y}
$$&lt;/p&gt;
&lt;p&gt;似然函数为&lt;/p&gt;
&lt;p&gt;$$\begin{aligned} L(\theta \mid x) &amp;amp;= \Pr(Y\mid X;\theta) \\&lt;br&gt;
&amp;amp;= \prod_i \Pr(y^{(i)} \mid x^{(i)};\theta) \\&lt;br&gt;
&amp;amp;= \prod_i h_\theta(x^{(i)})^{y^{(i)}}(1-h_\theta(x^{(i)}))^{1-y^{(i)}} \end{aligned}$$&lt;/p&gt;
&lt;p&gt;一般地，我们最大化对数似然函数，&lt;/p&gt;
&lt;p&gt;$$\log L(\theta \mid x) = \sum_{i=1}^{m}\log \Pr(y^{(i)} \mid x^{(i)};\theta)$$&lt;/p&gt;
&lt;p&gt;定义代价函数如下：&lt;/p&gt;
&lt;p&gt;$$J(\theta) = -\frac{1}{m} \log L(\theta \mid x) = -\frac{1}{m} \sum_i^m (y^{(i)} \log h_\theta(x^{(i)}) + (1 - y^{(i)})(1 - h_\theta(x^{(i)})))$$&lt;/p&gt;
&lt;p&gt;容易看到，我们最大化对数似然函数就是最小化代价函数 $J(\theta)$。在机器学习中，我们使用梯度下降最小化代价函数。&lt;/p&gt;
&lt;h3 id=&#34;代价函数求导&#34;&gt;代价函数求导&lt;/h3&gt;
&lt;p&gt;下面我们对代价函数$J(\theta)$对$\theta$进行求导，我们先考虑在一个样本上的代价函数&lt;/p&gt;
&lt;p&gt;$$J_1(\theta) = -y \log h_\theta(x) - (1 - y)(1 - h_\theta(x))$$&lt;/p&gt;
&lt;p&gt;现在对$J_1(\theta)$对$\theta$进行求导：&lt;/p&gt;
&lt;p&gt;注意到$\frac{d\sigma(z)}{dz} = \sigma(z) (1 - \sigma(z))$, 我们有&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}\frac{\partial}{\partial \theta_j} J_1(\theta) &amp;amp;= -y \frac{1}{h_\theta(x)} h_\theta(x) (1 - h_\theta(x)) x_j - (1 - y) \frac{1}{1 - h_\theta(x)} (-1) h_\theta(x) (1 - h_\theta(x)) x_j \\ &amp;amp;= (h_\theta(x) - y) x_j\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;有了以上结果，我们有&lt;/p&gt;
&lt;p&gt;$$\frac{\partial}{\partial \theta_j} J(\theta) = \frac{1}{m}\sum_i^m [h_\theta(x^{(i)}) - y^{(i)}]x_j^{(i)}$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>更改git提交中的作者和邮件信息</title>
      <link>https://keris.github.io/zh/post/change-author-name-email/</link>
      <pubDate>Thu, 07 Nov 2019 17:47:23 +0800</pubDate>
      <guid>https://keris.github.io/zh/post/change-author-name-email/</guid>
      <description>&lt;p&gt;在git的日常使用中更改提交的作者名和邮箱是一个十分常见的操作。例如，当你克隆了一个项目，如果你没有进行任何设置，此时提交的作者和邮件将使用全局选项，这可能不是你所要的。&lt;/p&gt;
&lt;p&gt;通过本文你将了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何配置git使用的提交者用户名和邮箱&lt;/li&gt;
&lt;li&gt;如何更改最近一次提交的作者名和邮件&lt;/li&gt;
&lt;li&gt;批量更改提交的作者名和邮件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置提交者用户名和邮箱&#34;&gt;配置提交者用户名和邮箱&lt;/h2&gt;
&lt;p&gt;你有两种方式进行设置，一是全局配置，二是为每个repo单独配置。&lt;/p&gt;
&lt;h3 id=&#34;全局地更改提交者用户名和邮箱&#34;&gt;全局地更改提交者用户名和邮箱&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;git config&lt;/code&gt;并&lt;code&gt;--global&lt;/code&gt;选项进行全局设置，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config --global user.name &amp;quot;Du Liqiang&amp;quot;
$ git config --global user.email &amp;quot;dlq137@gmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置完毕后，后续的提交将使用以上提供的信息。&lt;/p&gt;
&lt;h3 id=&#34;为某个repo单独配置&#34;&gt;为某个repo单独配置&lt;/h3&gt;
&lt;p&gt;全局选项可能并不适用于某个repo，此时就需要单独设置，使用&lt;code&gt;git config&lt;/code&gt;但省略&lt;code&gt;--global&lt;/code&gt;选项，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git config user.name &amp;quot;Du Liqiang&amp;quot;
$ git config user.email &amp;quot;dlq137@gmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的设置将覆盖全局选项，并且只应用于当前的repo。&lt;/p&gt;
&lt;h2 id=&#34;更改最近一次提交的作者用户名和邮箱&#34;&gt;更改最近一次提交的作者用户名和邮箱&lt;/h2&gt;
&lt;p&gt;如果你刚做了一次提交，发现用户名和邮箱并不是所要的，你可以使用&lt;code&gt;--amend&lt;/code&gt;选项重新提交：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git commit --amend --author=&amp;quot;Du Liqiang &amp;lt;dlq137@gmail.com&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;更改多次提交的作者用户名和邮箱&#34;&gt;更改多次提交的作者用户名和邮箱&lt;/h2&gt;
&lt;p&gt;这个时候我们需要借助强大的&lt;code&gt;rebase&lt;/code&gt;命令，首先我们找到上一次“好”的提交&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，并假设其提交hash为&lt;code&gt;0ad14fa5&lt;/code&gt;，执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git rebase -i -p 0ad14fa5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时我们会进入一个编辑器，将那些需要编辑的提交全标记为&lt;code&gt;edit&lt;/code&gt;，接下来git会指导你完成每次提交的编辑，你需要做的就是执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit --amend --author=&amp;quot;Du Liqiang &amp;lt;dlq137@gmail.com&amp;gt; --no-edit
$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用git-filter-branch批量更改&#34;&gt;使用git filter-branch批量更改&lt;/h2&gt;
&lt;p&gt;除了以上交互式的更改方法，另一种方法是借助git的&lt;code&gt;filter-branch&lt;/code&gt;命令，其允许你使用一个script批量处理大量的提交。&lt;/p&gt;
&lt;p&gt;如下命令筛选提交邮箱为WRONG_EMAIL的提交，并将其用户名和邮箱分别设置为NEW_NAME和NEW_EMAIL对应的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git filter-branch --env-filter &#39;
WRONG_EMAIL=&amp;quot;wrong@example.com&amp;quot;
NEW_NAME=&amp;quot;New Name Value&amp;quot;
NEW_EMAIL=&amp;quot;correct@example.com&amp;quot;

if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$WRONG_EMAIL&amp;quot; ]
then
    export GIT_COMMITTER_NAME=&amp;quot;$NEW_NAME&amp;quot;
    export GIT_COMMITTER_EMAIL=&amp;quot;$NEW_EMAIL&amp;quot;
fi
if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$WRONG_EMAIL&amp;quot; ]
then
    export GIT_AUTHOR_NAME=&amp;quot;$NEW_NAME&amp;quot;
    export GIT_AUTHOR_EMAIL=&amp;quot;$NEW_EMAIL&amp;quot;
fi
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.git-tower.com/learn/git/faq/change-author-name-email&#34;&gt;https://www.git-tower.com/learn/git/faq/change-author-name-email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;该次提交之前的提交具有正确的用户名和邮箱，其后的需要进行更改。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
  </channel>
</rss>
